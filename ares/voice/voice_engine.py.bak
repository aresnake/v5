import threading
import speech_recognition as sr
from ares.core.logger import get_logger

log = get_logger("VoiceEngine")

class VoiceEngine:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.listening = False
        self.thread = None

    def start_listening(self):
        if self.listening:
            log.info("🎙️ Already listening")
            return
        self.listening = True
        self.thread = threading.Thread(target=self.listen_in_background)
        self.thread.start()
        log.info("🎙️ VoiceEngine started listening")

    def stop_listening(self):
        self.listening = False
        if self.thread:
            self.thread.join()
        log.info("🛑 VoiceEngine stopped listening")

    def listen_in_background(self):
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source)
            log.info("🎙️ Calibrated ambient noise")
            while self.listening:
                try:
                    audio = self.recognizer.listen(source, timeout=5)
                    phrase = self.recognizer.recognize_google(audio, language="fr-FR")
                    log.info(f"🗣️ Recognized phrase: {phrase}")
                    # Ici tu peux injecter dans la pipeline Blade
                except sr.WaitTimeoutError:
                    log.info("⌛ Listening timeout, retrying...")
                except Exception as e:
                    log.error(f"❌ Voice recognition error: {e}")

# À activer depuis l’UI via bouton Start/Stop
