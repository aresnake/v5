# ares/core/intent_parser.py

"""
intent_parser.py – Analyse une phrase et extrait un intent
Basé sur le fichier voice_config.yaml
"""

import os
import yaml
from ares.core.logger import get_logger


CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "voice_config.yaml")
log = get_logger("IntentParser")

_intent_cache = None  # Cache pour éviter relecture constante


def load_intents() -> list:
    """Charge ou retourne les intents YAML (cached)."""
    global _intent_cache
    if _intent_cache is not None:
        return _intent_cache

    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            if isinstance(config, list):
                _intent_cache = config
                return config
            else:
                log.warning("⚠️ Le fichier voice_config.yaml ne contient pas une liste.")
                return []
    except Exception as e:
        log.error(f"❌ Erreur de lecture du fichier YAML : {e}")
        return []


def parse_intent(phrase: str) -> dict | None:
    """
    Reçoit une phrase, retourne l'intent correspondant si trouvé.
    Matching exact (str.strip().lower()) pour l’instant.
    """
    if not phrase:
        log.warning("⛔ Phrase vide reçue.")
        return None

    phrase_clean = phrase.strip().lower()
    intents = load_intents()

    for intent in intents:
        if not isinstance(intent, dict):
            continue
        expected = intent.get("phrase", "").strip().lower()
        if phrase_clean == expected:
            log.info(f"✅ Intent trouvé : {intent.get('name')} pour phrase '{phrase}'")
            return intent

    log.warning(f"❓ Aucun intent trouvé pour la phrase : '{phrase}'")
    return None
